<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[YAO's BLOG]]></title>
  <subtitle><![CDATA[A personal blog of Yao Zhang]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://psyyz10.github.io/"/>
  <updated>2015-11-13T01:41:59.000Z</updated>
  <id>http://psyyz10.github.io/</id>
  
  <author>
    <name><![CDATA[Yao Zhang]]></name>
    <email><![CDATA[psyyz10@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Valid Sudoku]]></title>
    <link href="http://psyyz10.github.io/2015/11/Valid-Sudoku/"/>
    <id>http://psyyz10.github.io/2015/11/Valid-Sudoku/</id>
    <published>2015-11-13T01:35:32.000Z</published>
    <updated>2015-11-13T01:41:59.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Problem:">Problem:</h2><p>Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules.</p>
<p>The Sudoku board could be partially filled, where empty cells are filled with the character ‘.’.</p>
<p><img style="width:40%" src="http://psyyz10.github.io/img/sudoku.png"><br>A partially filled sudoku which is valid.</p>
<p>Note:<br>A valid Sudoku board (partially filled) is not necessarily solvable. Only the filled cells need to be validated.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Problem:">Problem:</h2><p>Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules.</p>
<p>The Sudoku board could be]]>
    </summary>
    
      <category term="Leetcode and Lintcode" scheme="http://psyyz10.github.io/tags/Leetcode-and-Lintcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Permutation Sequence]]></title>
    <link href="http://psyyz10.github.io/2015/11/Permutation-Sequence/"/>
    <id>http://psyyz10.github.io/2015/11/Permutation-Sequence/</id>
    <published>2015-11-12T23:37:32.000Z</published>
    <updated>2015-11-13T01:30:07.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Problem:">Problem:</h2><p>Given n and k, return the k-th permutation sequence.</p>
<pre><code>Example
<span class="keyword">For</span> <span class="keyword">n</span> = 3, all permutations are listed <span class="keyword">as</span> follows:

<span class="string">"123"</span>
<span class="string">"132"</span>
<span class="string">"213"</span>
<span class="string">"231"</span>
<span class="string">"312"</span>
<span class="string">"321"</span>
<span class="keyword">If</span> k = 4, the fourth permutation is <span class="string">"231"</span>
</code></pre><p>Note<br>n will be between 1 and 9 inclusive.</p>
<p>Challenge<br>O(n*k) in time complexity is easy, can you do it in O(n^2) or less?</p>
<p><a href="https://leetcode.com/problems/permutation-sequence/" target="_blank" rel="external">Leetcode link</a><br><a href="https://leetcode.com/problems/permutation-sequence/" target="_blank" rel="external">Lintcode link</a></p>
<h2 id="My_Solution:">My Solution:</h2><p>The most intuitive way is calling nextPermuation method for k times. It takes O(k * n);<br>Assume there are n non-repeated numbers,whose k-th permuation is a1,a2,a3, …, an.<br>For each increassing of a1, there are (n-1)! possibilities for a2 to an. So a1 = k / (n-1)!;<br>Similarly we can get the following as following:</p>
<pre><code>k_2 = k % (n-<span class="number">1</span>)!;
a_2 = k_2 / (n-<span class="number">2</span>)!;
   ...
k_{n-<span class="number">1</span>} = k_{n-<span class="number">2</span>} / <span class="number">2</span>!;
a_{n-<span class="number">1</span>} = k-{n-<span class="number">1</span>} / <span class="number">1</span>!;
a_n = <span class="number">1</span>;
</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************************************************************</span><br><span class="line">	&gt; File Name: PermuationSequence.java</span><br><span class="line">	&gt; Author: Yao Zhang </span><br><span class="line">	&gt; Mail: psyyz10@163.com </span><br><span class="line">	&gt; Created Time: Thu 12 Nov 15:14:13 2015</span><br><span class="line"> ************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermuationSequence</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPermutation</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">int</span> factor = <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;                                                                                            </span><br><span class="line">            factor *= i;</span><br><span class="line">        &#125;               </span><br><span class="line">                        </span><br><span class="line">        <span class="keyword">boolean</span>[] used = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">        k = k - <span class="number">1</span>; <span class="comment">// note  k should minus 1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> index = k / factor; </span><br><span class="line">            k = k % factor;         </span><br><span class="line">                        </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (!used[j])&#123;      </span><br><span class="line">                    <span class="keyword">if</span> (index == <span class="number">0</span>)&#123;</span><br><span class="line">                       builder.append(String.valueOf(j + <span class="number">1</span>)) ; </span><br><span class="line">                       used[j] = <span class="keyword">true</span>;</span><br><span class="line">                       <span class="keyword">break</span>;       </span><br><span class="line">                    &#125; <span class="keyword">else</span>&#123;         </span><br><span class="line">                        index--;    </span><br><span class="line">                    &#125;   </span><br><span class="line">                &#125;       </span><br><span class="line">            &#125;           </span><br><span class="line">                        </span><br><span class="line">            <span class="keyword">if</span> (n - <span class="number">1</span> != i)         </span><br><span class="line">                factor /= (n - <span class="number">1</span> - i);</span><br><span class="line">        &#125;               </span><br><span class="line">                        </span><br><span class="line">        <span class="keyword">return</span> builder.toString();  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Problem:">Problem:</h2><p>Given n and k, return the k-th permutation sequence.</p>
<pre><code>Example
<span class="keyword">For</spa]]>
    </summary>
    
      <category term="Leetcode and Lintcode" scheme="http://psyyz10.github.io/tags/Leetcode-and-Lintcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Next Permutation]]></title>
    <link href="http://psyyz10.github.io/2015/11/Next-Permutation/"/>
    <id>http://psyyz10.github.io/2015/11/Next-Permutation/</id>
    <published>2015-11-12T20:48:57.000Z</published>
    <updated>2015-11-12T23:29:34.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Problem:">Problem:</h2><p>Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.</p>
<p>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).</p>
<p>The replacement must be in-place, do not allocate extra memory.</p>
<pre><code>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> → <span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>
<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span> → <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>
<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span> → <span class="number">1</span>,<span class="number">5</span>,<span class="number">1</span>
</code></pre><p><a href="https://leetcode.com/problems/next-permutation/" target="_blank" rel="external">Leetcode link</a><br><a href="http://www.lintcode.com/en/problem/next-permutation/" target="_blank" rel="external">Lintcode link</a></p>
<h2 id="Solution:">Solution:</h2><p><center><br>    <img src="http://psyyz10.github.io/img/nextPermutation.png"><br></center><br>Image from <a href="http://fisherlei.blogspot.com/2012/12/leetcode-next-permutation.html" target="_blank" rel="external">http://fisherlei.blogspot.com/2012/12/leetcode-next-permutation.html</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************************************************************</span><br><span class="line">	&gt; File Name: NextPermutation.java</span><br><span class="line">	&gt; Author: Yao Zhang </span><br><span class="line">	&gt; Mail: psyyz10@163.com </span><br><span class="line">	&gt; Created Time: Thu 12 Nov 12:53:41 2015</span><br><span class="line"> ************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NextPermutation</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextPermutation</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> partitionIndex = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt; nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                partitionIndex = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;                        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (partitionIndex != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> changeIndex = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[partitionIndex] &lt; nums[i])&#123;</span><br><span class="line">                    changeIndex = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;   </span><br><span class="line">            &#125;   </span><br><span class="line">            swap(nums,partitionIndex,changeIndex);   </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> start = partitionIndex + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> end = nums.length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        reverse(nums, start, end);</span><br><span class="line">    &#125;   </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start, j = end; i &lt; j; i++, j--)</span><br><span class="line">            swap(array, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> index1, <span class="keyword">int</span> index2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = array[index1];</span><br><span class="line">        array[index1] = array[index2];                      </span><br><span class="line">        array[index2] = temp;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>Related Problems:</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Problem:">Problem:</h2><p>Implement next permutation, which rearranges numbers into the lexicographically next greater permutation o]]>
    </summary>
    
      <category term="Leetcode and Lintcode" scheme="http://psyyz10.github.io/tags/Leetcode-and-Lintcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Remove Element]]></title>
    <link href="http://psyyz10.github.io/2015/11/Remove-Element/"/>
    <id>http://psyyz10.github.io/2015/11/Remove-Element/</id>
    <published>2015-11-12T20:09:45.000Z</published>
    <updated>2015-11-12T20:48:24.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Problem:">Problem:</h2><p>Given an array and a value, remove all instances of that value in place and return the new length.</p>
<p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p>
<p>Subscribe to see which companies asked this question<br><a href="https://leetcode.com/problems/remove-element/" target="_blank" rel="external">Leetcode link</a><br><a href="http://www.lintcode.com/en/problem/remove-element/" target="_blank" rel="external">Lintcode link</a></p>
<h2 id="Solution:">Solution:</h2><p>Use a ponter to point to the end index of the array. Go through the array, if the current element equals to the target value, swap the current value with the value at the end index, and then move the end pointer a unit towards the start direction. Then repeat.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************************************************************</span><br><span class="line">	&gt; File Name: RemoveElement.java</span><br><span class="line">	&gt; Author: Yao Zhang </span><br><span class="line">	&gt; Mail: psyyz10@163.com </span><br><span class="line">	&gt; Created Time: Thu 12 Nov 12:15:44 2015</span><br><span class="line"> ************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoveElement</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> endIndex = nums.length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt;= endIndex)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[index] == val)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = nums[index];</span><br><span class="line">                nums[index] = nums[endIndex];</span><br><span class="line">                nums[endIndex] = temp;</span><br><span class="line">                endIndex--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> endIndex + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Problem:">Problem:</h2><p>Given an array and a value, remove all instances of that value in place and return the new length.</p>
<p>]]>
    </summary>
    
      <category term="Leetcode and Lintcode" scheme="http://psyyz10.github.io/tags/Leetcode-and-Lintcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo]]></title>
    <link href="http://psyyz10.github.io/2015/11/hello-world/"/>
    <id>http://psyyz10.github.io/2015/11/hello-world/</id>
    <published>2015-11-12T18:48:13.000Z</published>
    <updated>2015-11-12T18:48:13.000Z</updated>
    <content type="html"><![CDATA[<p> Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask questions on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p> Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using ]]>
    </summary>
    
      <category term="Hexo" scheme="http://psyyz10.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[4Sum]]></title>
    <link href="http://psyyz10.github.io/2015/11/4Sum/"/>
    <id>http://psyyz10.github.io/2015/11/4Sum/</id>
    <published>2015-11-12T07:49:03.000Z</published>
    <updated>2015-11-12T20:05:14.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Problem:">Problem:</h2><p>Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.</p>
<p>Note:<br>Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)<br>The solution set must not contain duplicate quadruplets.<br>    For example, given array S = {1 0 -1 0 -2 2}, and target = 0.</p>
<pre><code>A solution <span class="built_in">set</span> is:
(-<span class="number">1</span>,  <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)
(-<span class="number">2</span>, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>)
(-<span class="number">2</span>,  <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>)
</code></pre><p><a href="https://leetcode.com/problems/4sum/" target="_blank" rel="external">Leetcode link</a><br><a href="http://www.lintcode.com/en/problem/four-sum/" target="_blank" rel="external">Lintcode link</a></p>
<h2 id="My_solution:">My solution:</h2><p>The solution is nearly the same as <a href="http://psyyz10.github.io/2015/11/3Sum/">3sum</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************************************************************</span><br><span class="line">	&gt; File Name: FourSum.java</span><br><span class="line">	&gt; Author: Yao Zhang </span><br><span class="line">	&gt; Mail: psyyz10@163.com </span><br><span class="line">	&gt; Created Time: Wed 11 Nov 23:48:43 2015</span><br><span class="line"> ************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FourSum</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; fourSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;     </span><br><span class="line">        <span class="comment">//write your code here</span></span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (nums.length &lt; <span class="number">4</span>) <span class="keyword">return</span> result;</span><br><span class="line">        Arrays.sort(nums);                 </span><br><span class="line">         </span><br><span class="line">        <span class="comment">// note i &lt; nums.length - 3                            </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">3</span>; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; nums[i - <span class="number">1</span>] == nums[i])</span><br><span class="line">                <span class="keyword">continue</span>;                  </span><br><span class="line">            </span><br><span class="line">            <span class="comment">// note j start from i + 1, but not i                               </span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.length - <span class="number">2</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (j != i + <span class="number">1</span> &amp;&amp; nums[j - <span class="number">1</span>] == nums[j])</span><br><span class="line">                    <span class="keyword">continue</span>;              </span><br><span class="line">                                           </span><br><span class="line">                <span class="keyword">int</span> start = j + <span class="number">1</span>;         </span><br><span class="line">                <span class="keyword">int</span> end = nums.length - <span class="number">1</span>;</span><br><span class="line">                                           </span><br><span class="line">                <span class="keyword">while</span> (start &lt; end)&#123;       </span><br><span class="line">                    <span class="keyword">int</span> sum = nums[i] + nums[j] + nums[start] + nums[end];</span><br><span class="line">                    <span class="keyword">if</span> (sum == target)&#123;</span><br><span class="line">                       ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">                       list.add(nums[i]);</span><br><span class="line">                       list.add(nums[j]);</span><br><span class="line">                       list.add(nums[start]);</span><br><span class="line">                       list.add(nums[end]);</span><br><span class="line">                       result.add(list);                                                                                                                                             </span><br><span class="line">                       start++;            </span><br><span class="line">                       end--;              </span><br><span class="line">                                           </span><br><span class="line">                      <span class="comment">// note condition start &lt; end</span></span><br><span class="line">                       <span class="keyword">while</span> (nums[start - <span class="number">1</span>] == nums[start] &amp;&amp; start &lt; end) </span><br><span class="line">                           start++;        </span><br><span class="line">                                           </span><br><span class="line">                       <span class="keyword">while</span> (nums[end + <span class="number">1</span>] == nums[end] &amp;&amp; start &lt; end)</span><br><span class="line">                           end--;          </span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target)&#123;</span><br><span class="line">                        start++;           </span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;               </span><br><span class="line">                        end--;             </span><br><span class="line">                    &#125;                      </span><br><span class="line">                &#125;                          </span><br><span class="line">            &#125;                              </span><br><span class="line">        &#125;                                  </span><br><span class="line">                                           </span><br><span class="line">        <span class="keyword">return</span> result; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>Related Problem:</em><br><a href="http://psyyz10.github.io/2015/11/Two-Sum/">Two Sum</a><br><a href="http://psyyz10.github.io/2015/11/3Sum/">3Sum</a><br><a href="http://psyyz10.github.io/2015/11/3Sum-Closest/">3Sum Closest</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Problem:">Problem:</h2><p>Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? F]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[3Sum Closest]]></title>
    <link href="http://psyyz10.github.io/2015/11/3Sum-Closest/"/>
    <id>http://psyyz10.github.io/2015/11/3Sum-Closest/</id>
    <published>2015-11-12T07:04:51.000Z</published>
    <updated>2015-11-12T07:39:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Problem:">Problem:</h2><p>Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p>
<pre><code>For example, given <span class="built_in">array</span> S = {-<span class="number">1</span> <span class="number">2</span> <span class="number">1</span> -<span class="number">4</span>}, and target = <span class="number">1.</span>

The sum that is closest to the target is <span class="number">2.</span> (-<span class="number">1</span> + <span class="number">2</span> + <span class="number">1</span> = <span class="number">2</span>).
</code></pre><p><a href="https://leetcode.com/problems/3sum-closest/" target="_blank" rel="external">Leetcode link</a><br><a href="http://www.lintcode.com/en/problem/three-sum-closest/" target="_blank" rel="external">Lintcode link</a></p>
<h2 id="Solution:">Solution:</h2><p>Sort the list first, which takes O(Nlog N). Then go through the sorted list， for each integer “nums[i]” in the list,<br>narrow the range from the integers at index i and the end of the list. It takes O(n^2) </p>
<p>Use a ‘min’ variable to record the minimum difference, and a ‘result’ variable to record the sum with the minimum difference.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************************************************************</span><br><span class="line">	&gt; File Name: ThreeSumClosest.java</span><br><span class="line">	&gt; Author: Yao Zhang </span><br><span class="line">	&gt; Mail: psyyz10@163.com </span><br><span class="line">	&gt; Created Time: Wed 11 Nov 23:20:11 2015</span><br><span class="line"> ************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreeSumClosest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">                      </span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">                      </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> start = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> end = nums.length - <span class="number">1</span>;</span><br><span class="line">                      </span><br><span class="line">            <span class="keyword">while</span> (start &lt; end)&#123;</span><br><span class="line">                <span class="keyword">int</span> sum = nums[i] + nums[start] + nums[end];</span><br><span class="line">                <span class="keyword">int</span> diff = Math.abs(sum - target); </span><br><span class="line">                      </span><br><span class="line">                <span class="keyword">if</span> (diff &lt; min)&#123;</span><br><span class="line">                    min = diff;</span><br><span class="line">                    result = sum;</span><br><span class="line">                &#125;</span><br><span class="line">                      </span><br><span class="line">                <span class="keyword">if</span> (sum == target)</span><br><span class="line">                    <span class="keyword">return</span> sum;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target)</span><br><span class="line">                    start++;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    end--;</span><br><span class="line">            &#125;         </span><br><span class="line">        &#125;             </span><br><span class="line">                      </span><br><span class="line">        <span class="keyword">return</span> result;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Problem:">Problem:</h2><p>Given an array S of n integers, find three integers in S such that the sum is closest to a given number, t]]>
    </summary>
    
      <category term="Leetcode and Lintcode" scheme="http://psyyz10.github.io/tags/Leetcode-and-Lintcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[3Sum]]></title>
    <link href="http://psyyz10.github.io/2015/11/3Sum/"/>
    <id>http://psyyz10.github.io/2015/11/3Sum/</id>
    <published>2015-11-12T02:16:29.000Z</published>
    <updated>2015-11-12T20:06:23.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Problem:">Problem:</h2><p>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p>
<p>Note:<br>Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)<br>The solution set must not contain duplicate triplets.<br>    For example, given array S = {-1 0 1 2 -1 -4},</p>
<pre><code>A solution <span class="built_in">set</span> is:
(-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>)
(-<span class="number">1</span>, -<span class="number">1</span>, <span class="number">2</span>)
</code></pre><p><a href="https://leetcode.com/problems/3sum/" target="_blank" rel="external">Leetcode link</a><br><a href="http://www.lintcode.com/en/problem/three-sum/" target="_blank" rel="external">Lintcode link</a></p>
<h2 id="My_Solution:">My Solution:</h2><p>Sort the list first, which takes O(Nlog N). Then go through the sorted list， for each integer “nums[i]” in the list,<br>narrow the range from the integers at index i and the end of the list. It takes O(n^2) </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************************************************************</span><br><span class="line">	&gt; File Name: ThreeSum.java</span><br><span class="line">	&gt; Author: Yao Zhang </span><br><span class="line">	&gt; Mail: psyyz10@163.com </span><br><span class="line">	&gt; Created Time: Wed 11 Nov 18:17:20 2015</span><br><span class="line"> ************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreeSum</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums)&#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (nums.length &lt; <span class="number">3</span>)</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">                     </span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) </span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">                     </span><br><span class="line">            <span class="keyword">int</span> start = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> end = nums.length - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">while</span> (start &lt; end)&#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[start] + nums[end] == <span class="number">0</span>)&#123;</span><br><span class="line">                    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">                    list.add(nums[i]);</span><br><span class="line">                    list.add(nums[start]);</span><br><span class="line">                    list.add(nums[end]);</span><br><span class="line">                    result.add(list);</span><br><span class="line">    </span><br><span class="line">                    start++;</span><br><span class="line">                    end--;</span><br><span class="line">    </span><br><span class="line">                    <span class="keyword">while</span> (nums[start - <span class="number">1</span>] == nums[start] &amp;&amp; start &lt; end)</span><br><span class="line">                        start++;</span><br><span class="line">    </span><br><span class="line">                    <span class="keyword">while</span>(nums[end + <span class="number">1</span>] == nums[end] &amp;&amp; start &lt; end)</span><br><span class="line">                        end--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] + nums[start] + nums[end] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    start++;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123; </span><br><span class="line">                    end--;</span><br><span class="line">                &#125;    </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;            </span><br><span class="line">        <span class="keyword">return</span> result;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>Related Problem:</em><br><a href="http://psyyz10.github.io/2015/11/Two-Sum/">Two Sum</a><br><a href="http://psyyz10.github.io/2015/11/4Sum/">4Sum</a><br><a href="http://psyyz10.github.io/2015/11/3Sum-Closest/">3Sum Closest</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Problem:">Problem:</h2><p>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique t]]>
    </summary>
    
      <category term="Leetcode and Lintcode" scheme="http://psyyz10.github.io/tags/Leetcode-and-Lintcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Two Sum]]></title>
    <link href="http://psyyz10.github.io/2015/11/Two-Sum/"/>
    <id>http://psyyz10.github.io/2015/11/Two-Sum/</id>
    <published>2015-11-12T01:12:59.000Z</published>
    <updated>2015-11-12T23:29:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Problem:">Problem:</h2><p>Given an array of integers, find two numbers such that they add up to a specific target number.</p>
<p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.</p>
<p>You may assume that each input would have exactly one solution.</p>
<pre><code>Input: numbers={<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>}, target=<span class="number">9</span>
Output: index1=<span class="number">1</span>, index2=<span class="number">2</span>
</code></pre><p><a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="external">Leetcode</a><br><a href="http://www.lintcode.com/en/problem/two-sum/" target="_blank" rel="external">Lintcode</a></p>
<h2 id="Solution">Solution</h2><p>We can use a hash map to record the occurrence and index of integers.</p>
<p>When we go through the list, the key (target - current integer) exits in the hash map, then we can return current index and index corresponding to (target - current integer). </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************************************************************</span><br><span class="line">	&gt; File Name: TwoSum.java</span><br><span class="line">	&gt; Author: Yao Zhang </span><br><span class="line">	&gt; Mail: psyyz10@163.com </span><br><span class="line">	&gt; Created Time: Wed 11 Nov 17:49:20 2015</span><br><span class="line"> ************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoSum</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">                       </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length ; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(nums[i])) <span class="keyword">continue</span>;</span><br><span class="line">                       </span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(target - nums[i]))&#123;</span><br><span class="line">                <span class="keyword">int</span>[] result = &#123;map.get(target - nums[i]) + <span class="number">1</span>, i + <span class="number">1</span>&#125;; </span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;          </span><br><span class="line">                       </span><br><span class="line">            map.put(nums[i],i);</span><br><span class="line">        &#125;              </span><br><span class="line">                       </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>Related Problem:</em><br><a href="http://psyyz10.github.io/2015/11/3Sum/">3Sum</a><br><a href="http://psyyz10.github.io/2015/11/4Sum/">4Sum</a><br><a href="http://psyyz10.github.io/2015/11/3Sum-Closest/">3Sum Closest</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Problem:">Problem:</h2><p>Given an array of integers, find two numbers such that they add up to a specific target number.</p>
<p>The]]>
    </summary>
    
      <category term="Leetcode and Lintcode" scheme="http://psyyz10.github.io/tags/Leetcode-and-Lintcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Longest Consecutive Sequence]]></title>
    <link href="http://psyyz10.github.io/2015/11/Longest-Consecutive-Sequence/"/>
    <id>http://psyyz10.github.io/2015/11/Longest-Consecutive-Sequence/</id>
    <published>2015-11-12T00:09:38.000Z</published>
    <updated>2015-11-12T23:28:35.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Problem:">Problem:</h2><p>Given an unsorted array of integers, find the length of the longest consecutive elements sequence.</p>
<pre><code>Example
Given [<span class="number">100</span>, <span class="number">4</span>, <span class="number">200</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>],
The longest consecutive elements sequence is [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]. Return its length: <span class="number">4.</span>
</code></pre><p>Clarification<br>Your algorithm should run in O(n) complexity.</p>
<p><a href="https://leetcode.com/problems/longest-consecutive-sequence/" target="_blank" rel="external">Leetcode link</a><br><a href="http://www.lintcode.com/en/problem/longest-consecutive-sequence/" target="_blank" rel="external">lintcode link</a></p>
<h2 id="My_Solution:">My Solution:</h2><p>The most intuitive solution is to sort the array and then find the longest sequence.<br>The space cost is O(1), time cost is O(Nlog N).</p>
<p>To save time cost, we can use a hash map to record two information:</p>
<ol>
<li>whether the number is in the list</li>
<li>whether the number has been visited (to avoid duplicate search)</li>
</ol>
<p>So we need a HashMap<integer, boolean=""> to record the information.</integer,></p>
<p>For each number in the list, if it has not been visited, we expend it to the smaller and larger number respectively.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************************************************************</span><br><span class="line">	&gt; File Name: LongestConsecutiveSequence.java</span><br><span class="line">	&gt; Author: Yao Zhang </span><br><span class="line">	&gt; Mail: psyyz10@163.com </span><br><span class="line">	&gt; Created Time: Wed 11 Nov 16:12:07 2015</span><br><span class="line"> ************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongestConsecutiveSequence</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestConsecutive</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Integer, Boolean&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Boolean&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) map.put(num,<span class="keyword">false</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> longest = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums)&#123;</span><br><span class="line">            <span class="keyword">if</span> (map.get(num)) <span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> length = <span class="number">1</span>;</span><br><span class="line">            map.put(num,<span class="keyword">true</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> left = num - <span class="number">1</span>; map.containsKey(left); left--)&#123;</span><br><span class="line">                map.put(left,<span class="keyword">true</span>);</span><br><span class="line">                length ++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> right = num + <span class="number">1</span>; map.containsKey(right); right++)&#123;</span><br><span class="line">                map.put(right,<span class="keyword">true</span>);</span><br><span class="line">                length++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            longest = Math.max(length,longest);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> longest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Problem:">Problem:</h2><p>Given an unsorted array of integers, find the length of the longest consecutive elements sequence.</p>
<pr]]>
    </summary>
    
      <category term="Leetcode and Lintcode" scheme="http://psyyz10.github.io/tags/Leetcode-and-Lintcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Median of Two Sorted Arrays]]></title>
    <link href="http://psyyz10.github.io/2015/11/Median-of-Two-Sorted-Arrays/"/>
    <id>http://psyyz10.github.io/2015/11/Median-of-Two-Sorted-Arrays/</id>
    <published>2015-11-11T05:38:25.000Z</published>
    <updated>2015-11-12T23:28:23.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Problem:">Problem:</h2><p>There are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>
<pre><code>Example
Given A=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>] and B=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], the median is <span class="number">3.5</span>.

Given A=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] and B=[<span class="number">4</span>,<span class="number">5</span>], the median is <span class="number">3.</span>
</code></pre><p>Challenge<br>The overall run time complexity should be O(log (m+n)).<br><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="external">Leetcode link</a><br><a href="http://www.lintcode.com/en/problem/median-of-two-sorted-arrays/" target="_blank" rel="external">Lintcode link</a></p>
<h2 id="My_Solution:">My Solution:</h2><p>This is a classic problem, which can be viewed as another form: “Given two sorted array, how to find the k-th largest number among both arrays?”.</p>
<p>The k in this problem is “total length / 2” for odd number. If the total length is even, we need to find  “total length / 2” and “total length / 2 + 1” number, and then get the average value.</p>
<p>The most intuitive solution is to merge them and find the k-th number, which takes O(log (M + N));</p>
<p>There is a better solution. Assume both amount of elements in A and B are greater than k / 2. If we compare the (k / 2)-th value in A (A[k / 2 - 1]) and the (k / 2)-th value in B (B[k / 2 - 1]), we have three possilbe cases:</p>
<ul>
<li>If A[k / 2 - 1] == B[k / 2 - 1], we can say the value is the k-th value we want.</li>
<li>If A[k / 2 - 1] &lt; B[k / 2 - 1], it means integer from A[0] to A[k / 2 - 1] should be smaller than the k-th value, so we can drop these values.</li>
<li>If A[k / 2 - 1] &gt; B[k / 2 - 1], it means integer from B[0] to B[k / 2 - 1] should be smaller than the k-th value, so we can drop these values.</li>
</ul>
<p>To drop the values in A and B, we can use two pointers to point to the start index of A and B respectively.<br>We can build a recursion whose stop points are:</p>
<ul>
<li>If the start index pointer of A or B exceed the length, return B[BStart + k - 1] or A[AStart + k - 1];</li>
<li>If k == 1, return the minimum of A[AStart] or B[BStart]</li>
<li>If A[AStart + k / 2 -1] == B[BStart + k / 2 -1], return the value.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************************************************************</span><br><span class="line">	&gt; File Name: MedianOfTwoSortedArray.java</span><br><span class="line">	&gt; Author: Yao Zhang </span><br><span class="line">	&gt; Mail: psyyz10@163.com </span><br><span class="line">	&gt; Created Time: Tue 10 Nov 22:01:06 2015</span><br><span class="line"> ************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MedianOfTwoSortedArray</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = A.length + B.length;</span><br><span class="line">        <span class="keyword">if</span> (len % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> findKth(A,<span class="number">0</span>,B,<span class="number">0</span>,len / <span class="number">2</span> + <span class="number">1</span>); </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> (findKth(A,<span class="number">0</span>,B,<span class="number">0</span>,len / <span class="number">2</span>) + findKth(A,<span class="number">0</span>,B,<span class="number">0</span>,len / <span class="number">2</span> + <span class="number">1</span>)) / <span class="number">2.0</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findKth</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> AStart,</span><br><span class="line">                                <span class="keyword">int</span>[] B, <span class="keyword">int</span> BStart, <span class="keyword">int</span> k)</span></span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (AStart &gt;= A.length)  </span><br><span class="line">            <span class="keyword">return</span> B[BStart + k - <span class="number">1</span>] ;</span><br><span class="line">        <span class="keyword">if</span> (BStart &gt;= B.length)  </span><br><span class="line">            <span class="keyword">return</span> A[AStart + k - <span class="number">1</span>] ;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> Math.min(A[AStart],B[BStart]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> va = AStart + k / <span class="number">2</span> &lt;= A.length ? </span><br><span class="line">            A[AStart + k / <span class="number">2</span> -<span class="number">1</span>] : Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> vb = BStart + k / <span class="number">2</span> &lt;= B.length ? </span><br><span class="line">            B[BStart + k / <span class="number">2</span> -<span class="number">1</span>] : Integer.MAX_VALUE;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (va &lt; vb) </span><br><span class="line">            <span class="keyword">return</span> findKth(A, AStart + k / <span class="number">2</span>, B, BStart, k - k / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (va &gt; vb) </span><br><span class="line">            <span class="keyword">return</span> findKth(A, AStart, B, BStart + k / <span class="number">2</span>, k - k / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">return</span> va; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Problem:">Problem:</h2><p>There are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sorte]]>
    </summary>
    
      <category term="Leetcode and Lintcode" scheme="http://psyyz10.github.io/tags/Leetcode-and-Lintcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Search in Rotated Sorted Array II]]></title>
    <link href="http://psyyz10.github.io/2015/11/Search-in-Rotated-Sorted-Array-II/"/>
    <id>http://psyyz10.github.io/2015/11/Search-in-Rotated-Sorted-Array-II/</id>
    <published>2015-11-11T02:07:31.000Z</published>
    <updated>2015-11-12T00:06:40.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Problem:">Problem:</h2><p>Follow up for “Search in Rotated Sorted Array”:<br>What if duplicates are allowed?</p>
<p>Would this affect the run-time complexity? How and why?</p>
<p>Write a function to determine if a given target is in the array.</p>
<p><a href="https://leetcode.com/problems/search-in-rotated-sorted-array-ii/" target="_blank" rel="external">Leetcode link</a><br><a href="http://www.lintcode.com/en/problem/search-in-rotated-sorted-array-ii/" target="_blank" rel="external">Lintcode link</a></p>
<h2 id="My_Solution:">My Solution:</h2><p>Compared to the “Search in Rotated Sorted Array”, the elements can be duplicate, so we can not know the start point is on the left part or right part, even if we have “nums[left] &lt;= nums[mid]”.</p>
<p>We can only judge when “nums[left] &lt; nums[mid]”. So if “nums[left] == nums[mid]”, we can add left lie “left++” until “nums[left]” and “nums[right]” are different. Code implemented in ‘search’ method.</p>
<p>The time complexity is O(n).</p>
<p>Solution 1:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************************************************************</span><br><span class="line">	&gt; File Name: SearchInRotatedArrayII.java</span><br><span class="line">	&gt; Author: Yao Zhang </span><br><span class="line">	&gt; Mail: psyyz10@163.com </span><br><span class="line">	&gt; Created Time: Tue 10 Nov 18:16:29 2015</span><br><span class="line"> ************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchInRotatedArrayII</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (left != right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; nums[left])&#123;</span><br><span class="line">                <span class="keyword">if</span> (target &gt;= nums[left] &amp;&amp; target &lt; nums[mid])    </span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; nums[left]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (target &gt; nums[mid] &amp;&amp; target &lt;= nums[right])</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            	left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (nums[left] == target) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;                    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Solution 1 is better to return an index. If we just need to return boolean, a brute force method is ok, like Solution 2.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">search2</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">   	<span class="keyword">for</span> (<span class="keyword">int</span> n : nums)&#123;</span><br><span class="line">   		<span class="keyword">if</span> (n == target) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   	&#125;</span><br><span class="line">   	<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p><em>Related Problem:</em><br><a href="http://psyyz10.github.io/2015/11/Search-in-Rotated-Sorted-Array/">Search in Rotated Sorted Array</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Problem:">Problem:</h2><p>Follow up for “Search in Rotated Sorted Array”:<br>What if duplicates are allowed?</p>
<p>Would this affec]]>
    </summary>
    
      <category term="Leetcode and Lintcode" scheme="http://psyyz10.github.io/tags/Leetcode-and-Lintcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Search in Rotated Sorted Array]]></title>
    <link href="http://psyyz10.github.io/2015/11/Search-in-Rotated-Sorted-Array/"/>
    <id>http://psyyz10.github.io/2015/11/Search-in-Rotated-Sorted-Array/</id>
    <published>2015-11-10T09:12:12.000Z</published>
    <updated>2015-11-12T00:05:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Problem:">Problem:</h2><p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.</p>
<p>(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).</p>
<p>You are given a target value to search. If found in the array return its index, otherwise return -1.</p>
<p>You may assume no duplicate exists in the array.</p>
<p>Example<br>For [4, 5, 1, 2, 3] and target=1, return 2.</p>
<p>For [4, 5, 1, 2, 3] and target=0, return -1.</p>
<p>Challenge<br>O(logN) time</p>
<p><a href="http://www.lintcode.com/en/problem/search-in-rotated-sorted-array/" target="_blank" rel="external">lintcode link</a><br><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/" target="_blank" rel="external">Leetcode link</a></p>
<h2 id="My_Solution:">My Solution:</h2><p>Use binary search to find the match.<br>There are some notable tips:</p>
<ul>
<li>Check the start point first (at the left or right side of mid), then assume the target on the consecutive segment.</li>
<li>While loop condition: left != right</li>
<li>After the while loop, we should add “if (nums[left] == target) return left;”</li>
<li>The if condition “nums[mid] &gt;= nums[left]” should contain the equal sign</li>
</ul>
<p>The time complexity is O(log n).</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*************************************************************************                                                                                                          </span><br><span class="line">  &gt; File Name: SearchInRotatedArray.java</span><br><span class="line">  &gt; Author: Yao Zhang                                                                                                                                                          </span><br><span class="line">  &gt; Mail: psyyz10@163.com       </span><br><span class="line">  &gt; Created Time: Thu 29 Oct 15:26:17 2015</span><br><span class="line">  ************************************************************************/</span></span><br><span class="line">                                       </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchInRotatedArray</span></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (left != right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target)</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt;= nums[left])&#123;</span><br><span class="line">                <span class="keyword">if</span> (target &gt;= nums[left] &amp;&amp; target &lt; nums[mid])    </span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (target &gt; nums[mid] &amp;&amp; target &lt;= nums[right])</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (nums[left] == target) <span class="keyword">return</span> left;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;                  </span><br><span class="line">    &#125;                                  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>Related Problem:</em><br><a href="http://psyyz10.github.io/2015/11/Search-in-Rotated-Sorted-Array-II/">Search in Rotated Sorted Array II</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Problem:">Problem:</h2><p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.</p>
<p>(i.e., 0 1 2 4 5 6 7 mig]]>
    </summary>
    
      <category term="Leetcode and Lintcode" scheme="http://psyyz10.github.io/tags/Leetcode-and-Lintcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Remove Duplicates from Sorted Array II]]></title>
    <link href="http://psyyz10.github.io/2015/11/Remove-Duplicates-from-Sorted-Array-II/"/>
    <id>http://psyyz10.github.io/2015/11/Remove-Duplicates-from-Sorted-Array-II/</id>
    <published>2015-11-10T09:09:39.000Z</published>
    <updated>2015-11-12T00:07:10.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Problem:">Problem:</h2><p>Follow up for “Remove Duplicates”:<br>What if duplicates are allowed at most twice?</p>
<p>For example,<br>Given sorted array nums = [1,1,1,2,2,3],</p>
<p>Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3. It doesn’t matter what you leave beyond the new length.</p>
<p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/" target="_blank" rel="external">Leetcode link</a><br><a href="http://www.lintcode.com/en/problem/remove-duplicates-from-sorted-array-ii/" target="_blank" rel="external">lintcode link</a></p>
<h2 id="Solution:">Solution:</h2><p>Compared to Remove Duplicates from Sorted Array, We onlt need to add an another variable to record the number of times that the same elements occur, named as ‘same’;<br>This is a sorted map, so we just need to one variable to solve the problem, if not sorted, we need a Hashmap to record the occurrence of each elements.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************************************************************</span><br><span class="line">	&gt; File Name: RemoveDuplicate2.java</span><br><span class="line">	&gt; Author: Yao Zhang </span><br><span class="line">	&gt; Mail: psyyz10@163.com</span><br><span class="line">	&gt; Created Time: Thu 29 Oct 15:26:17 2015</span><br><span class="line"> ************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoveDuplicate2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// write your code here</span></span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> same = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[last] == nums[i])</span><br><span class="line">                same++;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                same = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (same &lt; <span class="number">2</span>)</span><br><span class="line">                nums[++last] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ++last;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Related_Problem:">Related Problem:</h5><p><a href="http://psyyz10.github.io/2015/11/Remove-Duplicates-from-Sorted-Array/">Remove Duplicates from Sorted Array</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Problem:">Problem:</h2><p>Follow up for “Remove Duplicates”:<br>What if duplicates are allowed at most twice?</p>
<p>For example,<br]]>
    </summary>
    
      <category term="Leetcode and Lintcode" scheme="http://psyyz10.github.io/tags/Leetcode-and-Lintcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Remove Duplicates from Sorted Array]]></title>
    <link href="http://psyyz10.github.io/2015/11/Remove-Duplicates-from-Sorted-Array/"/>
    <id>http://psyyz10.github.io/2015/11/Remove-Duplicates-from-Sorted-Array/</id>
    <published>2015-11-10T08:52:47.000Z</published>
    <updated>2015-11-12T00:07:27.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Problem:">Problem:</h2><p>Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this in place with constant memory.</p>
<p>Example<br>Given input array A = [1,1,2],</p>
<p>Your function should return length = 2, and A is now [1,2].</p>
<p>Tags Expand  </p>
<p>Related Problems Expand </p>
<p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="external">Leetcode link</a><br><a href="http://www.lintcode.com/en/problem/remove-duplicates-from-sorted-array/" target="_blank" rel="external">lintcode link</a></p>
<h2 id="My_Solution:">My Solution:</h2><p>In this question, a variable named ‘last’ is used to record the index of last element in the result array.<br>Go through the array, if the current element nums[i] is not equal to the  last element of result array ‘nums[last]’,<br>add the current element to end of result array.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************************************************************</span><br><span class="line">    &gt; File Name: RemoveDuplicate2.java</span><br><span class="line">    &gt; Author: Yao Zhang                                                                                                                                                              </span><br><span class="line">    &gt; Mail: psyyz10@163.com</span><br><span class="line">    &gt; Created Time: Thu 29 Oct 15:26:17 2015</span><br><span class="line"> ************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoveDuplicate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[last] != nums[i])&#123;</span><br><span class="line">                nums[++last] = nums[i];</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;   </span><br><span class="line">              </span><br><span class="line">        <span class="keyword">return</span> ++last;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity is O(n), space complexity is O(1)</p>
<h5 id="Related_Quetion:">Related Quetion:</h5><p><a href="http://psyyz10.github.io/2015/11/Remove-Duplicates-from-Sorted-Array-II/">Remove Duplicates from Sorted Array II</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Problem:">Problem:</h2><p>Given a sorted array, remove the duplicates in place such that each element appear only once and return th]]>
    </summary>
    
      <category term="Leetcode and Lintcode" scheme="http://psyyz10.github.io/tags/Leetcode-and-Lintcode/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Deep Learning Overview]]></title>
    <link href="http://psyyz10.github.io/2015/11/Deep-Learning-Overview/"/>
    <id>http://psyyz10.github.io/2015/11/Deep-Learning-Overview/</id>
    <published>2015-11-10T01:01:13.000Z</published>
    <updated>2015-11-10T06:21:45.000Z</updated>
    <content type="html"><![CDATA[<p>Nowadays, the performances of machine learning models heavily rely on the representation of data or feature selection steps rather than just the choice of machine learning algorithms. Thus much effort is applied on preprocessing pipelines such as feature selection. Even though some specific domain knowledge can be used to help design the representation of data, the motivation of Artificial Intelligence needs more powerful representations of features. Deep Learning also called unsupervised learning, is a relatively new research field of machine learning which can learn multi- ple levels of abstraction and representation of features directly from data. It aims at learning feature hierarchies with higher level features formed by the composition of lower ones. The multiple levels structures allow to build complex functions which take data as input and output the result directly without depending on features crafted by humans <a href="#Bengio09">[Bengio09]</a>.</p>
<p>Deep learning achieved many successful results on some problems, such as im- age classification <a href="#Ciresan12">[Ciresan12]</a> <a href="#Krizhevsky12">[Krizhevsky12]</a>, semantic parsing <a href="#Bordes12">[Bordes12]</a> and speech recognition <a href="#Dahl12">[Dahl12]</a>. Deep architecture may express the complex distributions more efficiently with better per- formance on challenging tasks <a href="#Bengio07">[Bengio07]</a><a href="#Bengio09">[Bengio09]</a>. The hypothesis that the composition of addi- tional functional levels can give more powerful modeling capacity has already been proposed for a long time <a href="#Hinton90">[Hinton90]</a><a href="#Rumelhart86">[Rumelhart86]</a>. However, the training process of deep architec- ture was proven to be very difficult, until some successful approaches of <a href="#Bengio007">[Bengio007]</a><a href="#Hinton06">[Hinton06]</a><a href="#Hinton006">[Hinton006]</a> for training stacked autoencoder and DBN occurred. One key idea behind them is to train the deep architecture layer by layer by unsupervised learning, which is also called unsupervised feature learning. Each layer will generate a more abstract representation of the observed layer by doing a local optimization. Unsupervised feature learning can learn useful features automatically and directly from the data set by unsupervised learning without given specific features defined by human. The unsupervised learned features are more natural with less information lost <a href="#Bengio15">[Bengio15]</a>. Some deep learning models also have a potential powerful capacity of solving time-series problems <a href="#La14">[La14]</a>, which is another reason that makes deep learning suitable for stock trend prediction. Therefore deep learning can provide a new potential and powerful approach to improve stock prediction.</p>
<h2 id="Building_Deep_Representations">Building Deep Representations</h2><p>Experimental results show that it is much harder to train a deep architecture than training a shallow one <a href="#Bengio07">[Bengio07]</a><a href="#Erhan09">[Erhan09]</a>. The rapid recent growth and success of deep learning owe to a breakthrough initiated by Geoff Hinton in 2006 and quickly followed up by some papers <a href="#Hinton006">[Hinton006]</a><a href="#Bengio94">[Bengio94]</a><a href="#Poultney06">[Poultney06]</a>. Greedy layer wise unsupervised pre-training as a central idea was proposed. It means just one layer of the hierarchy is trained at one time by unsupervised feature learning to learn a new transformation of data with the previous layer output. Finally, the set of pre-trained layers is combined with a stan- dard supervised classifier such as Support Vector Machine, Logistic Regression or as initialization for a deep learning model such as a Stacked Denoising Auto-encoder or Deep Belief Network. Experiments show that the layer-wise stacking can attain a better feature representation in most time <a href="#Larochelle09">[Larochelle09]</a>. Although it is not difficult to combine single layers pretrained by unsupervised learning into a supervised model, it is not very clear how the single layers should combine to form a better unsuper- vised model <a href="#Bengio15">[Bengio15]</a>. One approach is to stack pre-trained RBMs (section 4.2.1) into DBN (section 4.2.2).</p>
<p><a href="http://psyyz10.github.io/2015/11/SDA/"><h3>Stacked Denoising Autoencoders</h3></a></p>
<p><br><a name="Bengio09">[Bengio09]</a> Yoshua Bengio. Learning deep architectures for AI. Foundations and Trends in Machine Learning, 2(1):1–127, 2009. Also published as a book. Now Publishers, 2009.<br><br><a name="Ciresan12">[Ciresan12]</a> Dan Ciresan, Ueli Meier, and Ju ̈rgen Schmidhuber. Multi-column deep neural networks for image classification. In Computer Vision and Pattern Recognition (CVPR), 2012 IEEE Conference on, pages 3642–3649. IEEE, 2012.<br><br><a name="Krizhevsky12">[Krizhevsky12]</a> Alex Krizhevsky, Ilya Sutskever, and Geoffrey E Hinton. Imagenet classification with deep convolutional neural networks. In Advances in neural information processing systems, pages 1097–1105, 2012.<br><br><a name="Bordes12">[Bordes12]</a> Antoine Bordes, Xavier Glorot, Jason Weston, and Yoshua Bengio. Joint learn- ing of words and meaning representations for open-text semantic parsing. In International Conference on Artificial Intelligence and Statistics, pages 127– 135, 2012.<br><br><a name="Dahl12">[Dahl12]</a> George E Dahl, Dong Yu, Li Deng, and Alex Acero. Context-dependent pre- trained deep neural networks for large-vocabulary speech recognition. Audio, Speech, and Language Processing, IEEE Transactions on, 20(1):30–42, 2012.<br><br><a name="Bengio07">[Bengio07]</a> Yoshua Bengio, Yann LeCun, et al. Scaling learning algorithms towards ai. Large-scale kernel machines, 34(5), 2007.<br><br><a name="Hinton90">[Hinton90]</a> Geoffrey E Hinton. Connectionist learning procedures. artificial intelligence, 40 1-3: 185 234, 1989. reprinted in j. carbonell, editor,”. Machine Learning: Paradigms and Methods”, MIT Press, 1990.<br><br><a name="Rumelhart86">[Rumelhart86]</a> David E Rumelhart and James L McClelland. The pdp research group: Par- allel distributed processing: Explorations in the microstructure of cognition. Foundations, 1, 1986.<br><br><a name="Bengio007">[Bengio007]</a> Yoshua Bengio, Pascal Lamblin, Dan Popovici, Hugo Larochelle, et al. Greedy layer-wise training of deep networks. Advances in neural information processing systems, 19:153, 2007.<br><br><a name="Hinton06">[Hinton06]</a> Geoffrey E Hinton and Ruslan R Salakhutdinov. Reducing the dimensionality of data with neural networks. Science, 313(5786):504–507, 2006.<br><br><a name="Hinton006">[Hinton006]</a> Geoffrey E Hinton, Simon Osindero, and Yee-Whye Teh. A fast learning algo- rithm for deep belief nets. Neural computation, 18(7):1527–1554, 2006.<br><br><a name="Erhan09">[Erhan09]</a> Dumitru Erhan, Pierre-Antoine Manzagol, Yoshua Bengio, Samy Bengio, and Pascal Vincent. The difficulty of training deep architectures and the effect of unsupervised pre-training. In International Conference on artificial intelligence and statistics, pages 153–160, 2009.<br><br><a name="Bengio15">[Bengio15]</a> Yoshua Bengio, Ian J. Goodfellow, and Aaron Courville. Deep learning. Book in preparation for MIT Press, 2015.<br><br><a name="La14">[La14]</a> Martin La ̈ngkvist, Lars Karlsson, and Amy Loutfi. A review of unsupervised feature learning and deep learning for time-series modeling. Pattern Recogni- tion Letters, 42:11–24, 2014.<br><br><a name="Bengio94">[Bengio94]</a> Yoshua Bengio, Patrice Simard, and Paolo Frasconi. Learning long-term depen- dencies with gradient descent is difficult. Neural Networks, IEEE Transactions on, 5(2):157–166, 1994.<br><br><a name="Poultney06">[Poultney06]</a> Christopher Poultney, Sumit Chopra, Yann L Cun, et al. Efficient learning of sparse representations with an energy-based model. In Advances in neural information processing systems, pages 1137–1144, 2006.<br><br><a name="Larochelle09">[Larochelle09]</a> Hugo Larochelle, Yoshua Bengio, J ́eroˆme Louradour, and Pascal Lamblin. Ex- ploring strategies for training deep neural networks. The Journal of Machine Learning Research, 10:1–40, 2009.<br><br><a name="Bengio15">[Bengio15]</a> Yoshua Bengio, Ian J. Goodfellow, and Aaron Courville. Deep learning. Book in preparation for MIT Press, 2015.<br></p>

]]></content>
    <summary type="html">
    <![CDATA[<p>Nowadays, the performances of machine learning models heavily rely on the representation of data or feature selection steps rather than j]]>
    </summary>
    
      <category term="Deep Learning" scheme="http://psyyz10.github.io/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Stacked Denoising Autoencoders]]></title>
    <link href="http://psyyz10.github.io/2015/11/SDA/"/>
    <id>http://psyyz10.github.io/2015/11/SDA/</id>
    <published>2015-11-09T19:36:06.000Z</published>
    <updated>2015-11-10T05:24:32.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Autoencoders">Autoencoders</h2><p>An autoencoder <a href="#Bengio09">[Bengio09]</a> is a network whose graphical structure is shown in Figure <a href="#F4_1">4.1</a>, which has the same dimension for both input and output. It takes an unlabeled training examples in set <img class="math" src="http://psyyz10.github.io/img/1.png"> where <img class="math" src="http://psyyz10.github.io/img/2.png"> is a single input and encodes it to the hidden layer <img class="math" src="http://psyyz10.github.io/img/3.png"> by linear combination with weight matrix <img class="math" style="height:18px" src="http://psyyz10.github.io/img/4.png"> and then through a non-linear activation function. It can be mathematically expressed as <img class="math" src="http://psyyz10.github.io/img/5.png">, where <img class="math" style="height:18px" src="http://psyyz10.github.io/img/6.png"> is the bias vector.</p>
<center><br>    <img id="F4_1" style="height:300px" src="http://psyyz10.github.io/img/7.png"><br>    <p>Figure 4.1: An Autoencoder</p><br></center>

<p>After that the hidden layer representation will be reconstructed to the output layer 􏰌<img class="math" src="http://psyyz10.github.io/img/8.png"> through a decoding function, in which 􏰌<img class="math" src="http://psyyz10.github.io/img/8.png"> has a same shape as <img class="math" src="http://psyyz10.github.io/img/9.png">. Hence the decoding function can be mathematically expressed as 􏰌<img class="math" src="http://psyyz10.github.io/img/10.png">, where <img class="math" src="http://psyyz10.github.io/img/11.png"> can be <img class="math" src="http://psyyz10.github.io/img/36.png"> called tried weights. In this project, tied weights were used. The aim of the model is to optimize the weight matrices, so that the reconstruction error between input and output can be minimized. It can be seen that the Autoencoder can be viewed as an unsupervised learning process of encoding-decoding: the encoder encodes the input through multi-layer encoder and then the decoder will decode it back with the lowest error <a href="#Hinton06">[Hinton06]</a>.<br>To measure the reconstruction error, traditional squared error <img class="math" src="http://psyyz10.github.io/img/12.png"> can be used. One of the most widely used way to measure that is the cross entropy if the input can be represented as bit vector or bit possibilities. The cross entropy error is shown in Equation <a href="#E4_1">4.1</a>:</p>
<center><br>    <img id="E4_1" style="height:60px" src="http://psyyz10.github.io/img/13.png"><br>    <p>Equation:4.1</p><br></center>

<p>The hidden layer code <img class="math" src="http://psyyz10.github.io/img/14.png"> can capture the information of input examples along the main dimensions of variant coordinates via minimizing the reconstruction error. It is similar to the principle component analysis (PCA) which project data on the main component that captures the main information of the data. h can be viewed as a compression of input data with some lost, which hopefully not contain much information about the data. It is optimized to compress well the training data and have a small reconstruction error for the test data, but not for the data randomly chosen from input space.</p>
<h2 id="Denoising_Autoencoders">Denoising Autoencoders</h2><p>In order to prevent the Autoencoder from just learning the identity of the input and make the learnt representation more robust, it is better to reconstruct a corrupted version of the input. The Autoencoder with a corrupted version of input is called a Denoising Autoencoder. Its structure is shown in Figure <a href="#F4_2">4.2</a>. This method was proposed in <a href="#Vincent08">[Vincent08]</a>, and it showed an advantage of corrupting the input by comparative experiments. Hence we will use denoising autoencoders instead of classic autoencoders in this thesis.</p>
<center><br>    <img id="F4_2" style="height:200px" src="http://psyyz10.github.io/img/15.png"><br>    <p>Figure 4.2: A graphical figure of Denoising Autoencoder. An input x is corrupted to <img class="math" src="http://psyyz10.github.io/img/16.png">. After that the autoencoder maps it to the hidden representation <img class="math" src="http://psyyz10.github.io/img/14.png"> and attempts to reconstruct <img class="math" src="http://psyyz10.github.io/img/9.png">.</p><br></center>

<p>A Denoising Autoencoder can be seen as a stochastic version with adding a stochastic corruption process to Autoencoder. For the raw inputs <img class="math" src="http://psyyz10.github.io/img/8.png">, some of them will be randomly set to 0 as corrupted inputs <img class="math" src="http://psyyz10.github.io/img/16.png">. Next the corrupted input <img class="math" src="http://psyyz10.github.io/img/16.png"> will be en- coded to the hidden code and then reconstructed to the ouput. But now 􏰌<img class="math" src="http://psyyz10.github.io/img/8.png"> is a deterministic function of <img class="math" src="http://psyyz10.github.io/img/16.png"> rather than <img class="math" src="http://psyyz10.github.io/img/9.png">. As Autoencoder, the reconstruction is considered and calculated between 􏰌<img class="math" src="http://psyyz10.github.io/img/16.png"> and <img class="math" src="http://psyyz10.github.io/img/9.png"> noted as <img class="math" src="http://psyyz10.github.io/img/18.png">. The parameters of the model are initialized randomly and then optimized by stochastic gradient descent algorithms. The difference is that the input of the encoding process is a corrupted version <img class="math" src="http://psyyz10.github.io/img/16.png">, hence it forces a much more clever mapping than just the identity, which can denoise and extract useful features in a noise condition.</p>
<p>The training algorithm of a denoising autoencoder is summarized in Algorithm 2.</p>
<center><br>    <img style="width:70%" src="http://psyyz10.github.io/img/19.png"><br></center>

<h2 id="Stacked_Autoencoder">Stacked Autoencoder</h2><p>Unsupervised pre-training<br>A Stacked Autoencoder is a multi-layer neural network which consists of Autoencoders in each layer. Each layer’s input is from previous layer’s output. The greedy layer wise pre-training is an unsupervised approach that trains only one layer each time. Every layer is trained as a denoising autoencoder via minimising the cross entropy in reconstruction. Once the first <img class="math" src="http://psyyz10.github.io/img/20.png"> layer has been trained, it can train the <img class="math" src="http://psyyz10.github.io/img/21.png"> layer by using the previous layer’s hidden representation as input. An example is shown below. Figure <a href="#E4_3">4.3</a> shows the first step of a stacked autoencoder. It trains an autoencoder on raw input <img class="math" src="http://psyyz10.github.io/img/9.png"> to learn <img class="math" src="http://psyyz10.github.io/img/22.png"> by minimizing the reconstruction error <img class="math" src="http://psyyz10.github.io/img/18.png">.</p>
<center><br>    <img id="E4_3" style="height:150px" src="http://psyyz10.github.io/img/34.png"><br>    <p>Figure 4.3: Step 1 in Stacked Autoencoders</p><br></center>

<p>Next step shown in Figure <a href="#F4_4">4.4</a>. The hidden representation <img class="math" src="http://psyyz10.github.io/img/22.png"> would be as ”raw input” to train another autoencoder by minimizing the reconstruction error <img class="math" src="http://psyyz10.github.io/img/25.png">. Note that the error is calculated between previous latent feature representation <img class="math" src="http://psyyz10.github.io/img/24.png"> and the output <img class="math" src="http://psyyz10.github.io/img/26.png">. Parameters <img class="math" src="http://psyyz10.github.io/img/27.png"> and <img class="math" src="http://psyyz10.github.io/img/28.png"> will be optimized by the gradient descent algorithm. The new hidden representation h2 will be the ’raw input’ of the next layer.</p>
<center><br>    <img id="F4_4" style="height:225px" src="http://psyyz10.github.io/img/29.png"><br>    <p>Figure 4.4: Step 2 in Stacked Autoencoders </p><br></center><br>The pre-training algorithm of stacked denoising autoencoder is summarized in algorithm 3.<br><center><br>    <img style="width:70%" src="http://psyyz10.github.io/img/30.png"><br></center>

<h2 id="Supervised_fine-tuning">Supervised fine-tuning</h2><p>At last once all the layers has been pre-trained, the next step called fine-tuning is performed. A supervised predictor will be extended to the last layer, such as support vector machine or a logistic regression layer. In this project, we chose a logistic regression layer. After that the network will be trained. A sample graph is shown in Figure <a href="#F4_5">4.5</a>. It can be seen that for each layer of the network, only the encoding hidden representation <img class="math" src="http://psyyz10.github.io/img/31.png"> are considered. The fine-tuning step will train the whole network by back-propagation like training an Artificial Neural Network. A stacked denoising autoencoder is just replace each layer’s autoencoder with denoising autoencoder whilst keeping other things the same.</p>
<center><br>    <img id="F4_5" style="height:300px" src="http://psyyz10.github.io/img/32.png"><br>    <p>Figure 4.5: A complete architecture of stacked autoencoder</p><br></center>

<p>The supervised fine-tuning algorithm of stacked denoising auto-encoder is summa- rized in Algorithm 4.</p>
<center><br>    <img style="width:70%" src="http://psyyz10.github.io/img/33.png"><br>    <img style="width:70%" src="http://psyyz10.github.io/img/35.png"><br></center>

<p></p><p><br><a name="Bengio09">[Bengio09]</a> Yoshua Bengio. Learning deep architectures for AI. Foundations and Trends in Machine Learning, 2(1):1–127, 2009. Also published as a book. Now Publishers, 2009.</p>
<p><a name="Hinton06">[Hinton06]</a> Geoffrey E Hinton and Ruslan R Salakhutdinov. Reducing the dimensionality of data with neural networks. Science, 313(5786):504–507, 2006</p>
<p><a name="Vincent08">[Vincent08]</a> Pascal Vincent, Hugo Larochelle, Yoshua Bengio, and Pierre-Antoine Man- zagol. Extracting and composing robust features with denoising autoencoders. In Proceedings of the 25th international conference on Machine learning, pages 1096–1103. ACM, 2008.<br></p><br>￼￼￼￼<p></p>
<style type="text/css">
img {
    border: 0;
    max-width: 100%;
}
img.math {
    vertical-align: middle;
    display: inline;
    height: 22px; 
}
</style>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Autoencoders">Autoencoders</h2><p>An autoencoder <a href="#Bengio09">[Bengio09]</a> is a network whose graphical structure is shown ]]>
    </summary>
    
      <category term="Deep Learning" scheme="http://psyyz10.github.io/tags/Deep-Learning/"/>
    
  </entry>
  
</feed>
